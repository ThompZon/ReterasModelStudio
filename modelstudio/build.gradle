import java.text.SimpleDateFormat

apply plugin: "java"

sourceCompatibility = 1.16
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets.main.java.srcDirs = [ "src/" ]
sourceSets.main.resources.srcDirs = [ "res/" ]

project.ext.mainClassName = "com.hiveworkshop.rms.Main"

task run(dependsOn: classes, type: JavaExec) {
    mainClass = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    setIgnoreExitValue(true)
}

task extractLwjglManifest(type: Copy) {
    from {
        configurations.compileClasspath.filter { it.name == "lwjgl-${lwjglVersion}.jar" }
                .collect { zipTree(it) }
    }
    include 'META-INF/MANIFEST.MF'
    into "$buildDir/tmp"
}

task dist(type: Jar) {
    // From http://cmoz.me/blog/2014/11/service-files-uber-jars-and-gradle/
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    doFirst {
        def serviceDir = file("$buildDir/META-INF/services")
        serviceDir.deleteDir()
        serviceDir.mkdirs()

        // copy all service files from deps to buildDir
        for(file in configurations.runtimeClasspath) {
            zipTree(file).matching{ include 'META-INF/services/*' }.each { f ->
                new File(serviceDir, f.name) << f.getText("UTF-8") + "\n"
            }
        }
    }

    from files(sourceSets.main.output.classesDirs)
    from files(sourceSets.main.output.resourcesDir)

    dependsOn extractLwjglManifest
    manifest {
        from (extractLwjglManifest.destinationDir.path + '/META-INF/MANIFEST.MF') {
            eachEntry { details ->
                if (details.key == 'Created-By')
                    details.value = System.getProperty('java.runtime.version') + ' (' + System.getProperty('java.vendor') + ')'
                else if (details.key == 'Ant-Version')
                    details.exclude()
            }
        }
        attributes(
                'Main-Class': project.mainClassName,
                'Built-By': System.getProperty('user.name'),
                'Gradle-Version': 'Gradle ' + gradle.getGradleVersion(),
        )

    }

    from(configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }) {
        exclude 'META-INF/**' // Don't let Gradle merge service files
    }

    graalvmNative {
        toolchainDetection = false
        binaries {
            main {
                imageName = project.name
                mainClass = project.mainClassName

                buildArgs.add('--initialize-at-run-time=org.lwjgl')
                buildArgs.add('--native-image-info')
                buildArgs.add('-march=compatibility')
            }
        }
        binaries.all {
            resources.autodetect()
        }
    }

    // Include service files from the buildDir.
    from fileTree(buildDir).matching{ include 'META-INF/services/*' }
}

task setVersion(){
    def path = sourceSets.main.resources.srcDirs.path[0]
    def vName = "TwilacsTruly3D"
    def versionString = """${version}.${vName}.${new SimpleDateFormat("yyyy.MM.dd").format(new Date())}"""
    println "writing version \"" + versionString +  "\" to path: " + path

    def file = new File(path, "version.txt")
    if(!file.exists()){
        file.createNewFile()
    }
    file.text = versionString
}

dist.dependsOn classes
//dist.doLast {setVersion()}

eclipse.project {
    name = appName + "-modelstudio"
}